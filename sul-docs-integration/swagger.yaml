openapi: 3.0.0
info:
  title: Skill Up Level API
  description: |
    API documentation
  termsOfService: http://swagger.io/terms/
  contact:
    email: danila.apalonik@itechart-group.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://sul-server.herokuapp.com/api/
tags:
- name: account
  description: All the account data access.
- name: users
  description: User profile data access.
- name: courses
  description: All the courses manipulations.
- name: clientCourses
  description: User courses data access.
- name: materials
  description: Courses materials data access.
- name: pendingCourses
  description: Pending courses data access.
paths:
  /account/login:
    post:
      tags:
      - account
      summary: Log In attempt & Getting auth tokens.
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/AuthBody'
      responses:
        "200":
          description: Successful login execution response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        "401":
          description: Authorization error.
  /account/logout:
    get:
      tags:
      - account
      summary: Log Out attempt & Cookie clearing.
      operationId: logout
      responses:
        "200":
          description: Successful log out.
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /account/refresh:
    get:
      tags:
      - account
      summary: Refresh auth tokens.
      operationId: refresh
      parameters:
      - name: refreshToken
        in: cookie
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/CommonToken'
      responses:
        "200":
          description: Successful refresh execution response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
  /users/{id}:
    get:
      tags:
      - users
      summary: User profile information access.
      operationId: getProfileInformation
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          description: Profile info received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileInfo'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /courses:
    get:
      tags:
      - courses
      summary: Get all courses info.
      operationId: getAllCourses
      responses:
        "200":
          description: Courses information received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseInfo'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
    post:
      tags:
      - courses
      summary: Apply for a course.
      operationId: applyCourse
      responses:
        "200":
          description: LATER
        "403":
          description: LATER
      security:
      - jwtAuth: []
  /courses/{id}:
    get:
      tags:
      - courses
      summary: Get course information by its ID.
      operationId: getCourseById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          description: Course information received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseInfo'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /courses/{id}/materials:
    get:
      tags:
      - courses
      - materials
      summary: Get particular course materials.
      operationId: getMaterials
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          $ref: '#/components/responses/'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /clientCourses:
    get:
      tags:
      - clientCourses
      summary: Get list of user courses.
      operationId: getClientCourses
      responses:
        "200":
          description: Client courses information received.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientCourse'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /clientCourses/{id}:
    get:
      tags:
      - clientCourses
      summary: Get particular user course.
      operationId: getClientCourseById
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          description: Client course information received.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCourse'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
    put:
      tags:
      - clientCourses
      summary: "Mark the particular course as [passed] by its id."
      operationId: passCourse
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          description: Course successfully passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientCourse'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /clientCourses/{id}/start:
    get:
      tags:
      - clientCourses
      summary: Start particular course.
      operationId: startCourse
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          description: Course successfully started.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /clientCourses/{id}/finish:
    get:
      tags:
      - clientCourses
      summary: Finish particular course.
      operationId: finishCourse
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          description: Course successfully finished.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /clientCourses/{id}/test:
    get:
      tags:
      - clientCourses
      summary: Get course test.
      operationId: getTest
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/CommonId'
      responses:
        "200":
          description: Course test received successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Test'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
  /pendingCourses:
    get:
      tags:
      - pendingCourses
      summary: Get pending courses list.
      operationId: getPendingCourses
      responses:
        "200":
          description: Pending courses list received successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/'
        "403":
          $ref: '#/components/schemas/ForbiddenError'
      security:
      - jwtAuth: []
components:
  schemas:
    TokenResponse:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/CommonToken'
        refreshToken:
          $ref: '#/components/schemas/CommonToken'
    LoginResponse:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/CommonToken'
        refreshToken:
          $ref: '#/components/schemas/CommonToken'
        _id:
          $ref: '#/components/schemas/CommonId'
        username:
          type: string
          example: user
        email:
          type: string
          example: user@itechart-group.com
        role:
          type: string
          example: employee
        firstName:
          type: string
          example: User
        lastName:
          type: string
          example: User
        position:
          type: string
          example: Software Engineer
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        group:
          type: string
          example: U4.D4.mocked
        employees:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pendingCourses:
          type: array
          items:
            type: string
            example: _id
        avatar:
          type: string
          example: https://image-url.zone
        birthday:
          type: string
          example: 1970-01-01T00:00:00Z
        skype:
          type: string
          example: user
        phone:
          type: string
          example: +375(33)26535213
    ProfileInfo:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/CommonId'
        username:
          type: string
          example: user
        email:
          type: string
          example: user@itechart-group.com
        role:
          type: string
          example: employee
        firstName:
          type: string
          example: User
        lastName:
          type: string
          example: User
        position:
          type: string
          example: Software Engineer
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        group:
          type: string
          example: U4.D4.mocked
        employees:
          type: array
          items:
            $ref: '#/components/schemas/User'
        pendingCourses:
          type: array
          items:
            $ref: '#/components/schemas/CourseInfo'
        avatar:
          type: string
          example: https://image-url.zone
        birthday:
          type: string
          example: 1970-01-01T00:00:00Z
        skype:
          type: string
          example: user
        phone:
          type: string
          example: +375(33)2635213
        managerId:
          $ref: '#/components/schemas/CommonId'
    UnauthorizedError:
      type: string
      description: Authorization error
      example: Unauthorized
    ForbiddenError:
      type: string
      description: Access forbidden.
      example: Error message.
    AuthBody:
      required:
      - login
      - password
      type: object
      properties:
        login:
          type: string
          example: user
        password:
          type: string
          example: user
    Skill:
      required:
      - _id
      - name
      - score
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/CommonId'
        name:
          type: string
          example: js
        image:
          type: string
          example: https://i.imgur.com/S2lYrKD.gif
        score:
          type: integer
          example: 3
    Course:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/CommonId'
        title:
          type: string
          example: JS for beginners
        description:
          type: string
          example: Basic course for beginners
        technology:
          type: array
          example:
          - js
          - html
          - css
          items:
            type: string
        requiredSkills:
          type: array
          example:
          - html
          - css
          items:
            type: string
        duration:
          type: integer
          example: 123124679
        materials:
          $ref: '#/components/schemas/Material'
        lessons:
          type: integer
          example: 0
        test:
          $ref: '#/components/schemas/CommonId'
    CourseInfo:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/CommonId'
        title:
          type: string
          example: JS for beginners
        description:
          type: string
          example: Basic course for beginners
        technology:
          type: array
          example:
          - js
          - html
          - css
          items:
            type: string
        requiredSkills:
          type: array
          example:
          - html
          - css
          items:
            type: string
        duration:
          type: integer
          example: 123124679
        lessons:
          type: integer
          example: 0
        test:
          $ref: '#/components/schemas/CommonId'
    Material:
      type: string
      example: TO DO LATER
    User:
      type: object
      properties:
        prop:
          type: string
          description: das
    Test:
      type: object
      properties:
        later:
          type: string
          example: LATER!
    ClientCourse:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/CommonId'
        user:
          $ref: '#/components/schemas/CommonId'
        course:
          $ref: '#/components/schemas/Course'
        status:
          type: string
          example: pending
        progress:
          type: array
          items:
            $ref: '#/components/schemas/ProgressStage'
    CommonToken:
      type: string
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    CommonId:
      type: string
      example: 61f944b7a91736d7260f1ee3
    ProgressStage:
      type: object
      properties:
        stage:
          type: string
          example: "2"
        isComleted:
          type: boolean
          example: true
        _id:
          $ref: '#/components/schemas/CommonId'
    inline_response_200:
      type: object
      properties:
        start:
          type: boolean
          example: true
    inline_response_200_1:
      type: object
      properties:
        finish:
          type: boolean
          example: true
  responses:
    LoginResponseSuccess:
      description: Successful login execution response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginResponse'
    RefreshResponseSuccess:
      description: Successful refresh execution response.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenResponse'
    ProfileInfoResponseSuccess:
      description: Profile info received.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProfileInfo'
    CourseInfoResponseSuccess:
      description: Course information received.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CourseInfo'
    AllCoursesResponseSuccess:
      description: Courses information received.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/CourseInfo'
    ClientCourseResponseSuccess:
      description: Client course information received.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientCourse'
    AllClientCoursesResponseSuccess:
      description: Client courses information received.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ClientCourse'
    StartCourseResponseSuccess:
      description: Course successfully started.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200'
    FinishCourseResponseSuccess:
      description: Course successfully finished.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_response_200_1'
    PassCourseResponseSuccess:
      description: Course successfully passed.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClientCourse'
    GetTestResponseSuccess:
      description: Course test received successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Test'
    GetPendingCoursesResponseSuccess:
      description: Pending courses list received successfully.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/'
  requestBodies:
    AuthBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthBody'
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
